package pipeline

import (
	"errors"
	"fmt"

	"github.com/elastic/beats/v7/libbeat/common"
)

// Settings describes the configuration of inputs and output to be run.
type Settings struct {
	Inputs  []InputSettings           `config:"club.inputs"`
	Outputs map[string]*common.Config `config:"outputs"`
}

// InputSettings provides the input configuration with all its data streams that
// will be configured.
type InputSettings struct {
	// Input ID generated by Integrations (optional)
	ID string `config:"id"`

	// User readable input name (optional)
	Name string `config:"name"`

	// Input type (XXX: depends)
	Type string `config:"type"`

	// Meta provides additional metadata that will be associated with the input
	// and all its streams.
	Meta map[string]interface{} `config:"meta"`

	// Namespace for the input and all configured streams.
	Namespace string `config:"data_stream.namespace"`

	// UseOutput configures the output the input shall be associated with.
	UseOutput string `config:"use_output"`

	// DefaultSettings provides a set of settings that will be shared by all streams.
	DefaultSettings *common.Config `config:"default"`

	// Streams configure the actual data collection. Internally each stream will create
	// a v2.Input instance.
	Streams []*common.Config `config:"streams"`
}

// Validate checks if the configuration can be applied.
// Input and output configuration are not validated.
//
// - a default output must be configured
// - the output mentioned in use_output must exist
func (s *Settings) Validate() error {
	fmt.Printf("new configuration: %#v\n", s)

	if _, exists := s.Outputs["default"]; !exists {
		return errors.New("no default output configured")
	}

	for _, inp := range s.Inputs {
		if inp.UseOutput == "" {
			continue
		}
		if _, exist := s.Outputs[inp.UseOutput]; !exist {
			return fmt.Errorf("output '%v' not defined", inp.UseOutput)
		}
	}

	return nil
}
